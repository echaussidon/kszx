rule all:
    input:
        "01_plot_surveys.ipynb",
        "data/pk_mcs.npy"

# 'snakemake -f -U one_mc' is useful for debugging
rule one_mc:
    input:
        "data/mcs/pk_0.npy"


rule download_act:
    output:
        "data/touchfile_download_act"
    shell:
        "python -m kszx download_act 5 && touch {output}"


rule download_sdss:
    output:
        "data/touchfile_download_sdss"
    shell:
        "python -m kszx download_sdss CMASS_North && touch {output}"


rule run_camb:
    output:
        "data/cosmology.pkl"
    run:
        import local_pipeline
        local_pipeline.run_camb()


rule make_bounding_box:
    input:
        "data/cosmology.pkl",
        "data/touchfile_download_sdss"
    output:
        "data/bounding_box.pkl"
    run:
        import local_pipeline
        local_pipeline.make_bounding_box()


rule eval_act_ivar_on_sdss_randoms:
    input:
        "data/touchfile_download_act",
        "data/touchfile_download_sdss"
    output:
        "data/randoms_with_act_ivar.h5"
    run:
        import local_pipeline
        local_pipeline.eval_act_ivar_on_sdss_randoms()


rule plot_surveys:
    input:
        "data/bounding_box.pkl",
        "data/randoms_with_act_ivar.h5",
        "01_plot_surveys.py"
    output:
        "01_plot_surveys.ipynb"
    shell:
        "jupytext --to notebook --execute 01_plot_surveys.py"



rule run_mc:
    input:
        "data/bounding_box.pkl",
        "data/randoms_with_act_ivar.h5"
    output:
        "data/mcs/pk_{imc}.npy"
    run:
        import local_pipeline
        local_pipeline.run_mc(output[0])
    
    
rule aggregate_mcs:
    input:
        expand("data/mcs/pk_{imc}.npy", imc=range(1000))
    output:
        "data/pk_mcs.npy"
    run:
        import local_pipeline
        local_pipeline.aggregate_mcs()


# postprocess_mcs (jupyter notebook)
